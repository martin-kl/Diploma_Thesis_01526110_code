module Names

imports

  Literals

context-free syntax

  VarDef.VarDef = IDENTIFIER //declares as new variable 
  VarRef.VarRef = IDENTIFIER //uses an already declaraed variable
  VarRefDef.VarRefDef = IDENTIFIER //both, declares variable if is does not exists yet and uses it
  VarAssign.VarAssign = < AS <VarDef>> {case-insensitive}
  PropRef.PropRef = <<VarRef>.<Prop>>

  Prop = Identifier

  Identifier = IDENTIFIER
  Identifier = DOUBLE-QUOTED-STRING

  MarcoNameDef.MarcoNameDef = IDENTIFIER //declares as new macro name 
  MarcoNameRef.MarcoNameRef = <~<IDENTIFIER>> //uses an already declaraed macro name

  GraphName = IDENTIFIER
	
lexical syntax

  IDENTIFIER = [a-zA-Z][a-zA-Z0-9\_]*
  FUNCTION-NAME = IDENTIFIER

  DOUBLE-QUOTED-STRING = '"' (~[\"\n\\] | ESCAPE-CHAR)* '"'
  ESCAPE-CHAR          = "\\" [tbnrf\\\"\']

  DATA-TYPE            = [a-zA-Z][a-zA-Z0-9\_\ ]*

lexical restrictions // greedy matching

  IDENTIFIER -/- [a-zA-Z0-9\_]

lexical syntax // reserved keywords

  IDENTIFIER = 'true' {reject, case-insensitive}
  IDENTIFIER = 'false' {reject, case-insensitive}
  IDENTIFIER = 'not' {reject, case-insensitive}
  IDENTIFIER = 'case' {reject, case-insensitive}
  IDENTIFIER = 'null' {reject, case-insensitive}
  IDENTIFIER = 'as' {reject, case-insensitive}
  IDENTIFIER = 'is' {reject, case-insensitive}
  IDENTIFIER = 'in' {reject, case-insensitive}

  FUNCTION-NAME = 'count' {reject}
  FUNCTION-NAME = 'min' {reject}
  FUNCTION-NAME = 'max' {reject}
  FUNCTION-NAME = 'sum' {reject}
  FUNCTION-NAME = 'avg' {reject}
  FUNCTION-NAME = 'exists' {reject}
  FUNCTION-NAME = 'asc' {reject}
  FUNCTION-NAME = 'desc' {reject}
  
lexical syntax
  CURLY-OPEN = "{"
  CURLY-CLOSE = "}"
  LT = "<"
  GT = ">"
  AT-SIGN = "@"