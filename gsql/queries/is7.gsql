CREATE OR REPLACE QUERY is7(STRING messageId) FOR GRAPH ldbc_snb syntax v2 {
  TYPEDEF TUPLE<INT commentId, STRING commentContent, DATETIME commentCreationDate, INT replyAuthorId, STRING replyAuthorFirstName, STRING replyAuthorLastName, BOOL replyAuthorKnowsOriginalMessageAuthor> reply;

  SetAccum<STRING> @@seed;
  OrAccum @knows;
  SumAccum<INT> @replyAuthorId;
  SumAccum<STRING> @replyAuthorFirstName, @replyAuthorLastName;
  HeapAccum<reply>(100, commentCreationDate DESC, replyAuthorId ASC) @@replyTop;

  @@seed += messageId;
  vMessage = to_vertex_set(@@seed, "Comment");
  IF vMessage.size() == 0 THEN
    vMessage = to_vertex_set(@@seed, "Post");
  END;

  accFriend = 
    SELECT s
    FROM vMessage:s -(HAS_CREATOR>:e1)- Person:t1 -(KNOWS:e2)- Person:t2
    ACCUM t2.@knows += True;
  
  accReply = 
    SELECT s
    FROM vMessage:s -((<REPLY_OF|<REPLY_OF):e1)- Comment:t1 -(HAS_CREATOR>:e2)- Person:t2
    ACCUM
      t1.@replyAuthorId = t2.id,
      t1.@replyAuthorFirstName = t2.firstName,
      t1.@replyAuthorLastName = t2.lastName,
      CASE WHEN t2.@knows THEN t1.@knows += True END
    POST-ACCUM @@replyTop += reply(t1.id, t1.content, t1.creationDate, t1.@replyAuthorId, t1.@replyAuthorFirstName, t1.@replyAuthorLastName, t1.@knows);

  PRINT @@replyTop;
}
//INSTALL QUERY is7
//RUN QUERY is7(1030792205821)